{"ast":null,"code":"var _jsxFileName = \"/Users/gmdscpr/Documents/Projectos/Crypto & Blockchain/DeFi Projects/ribbon finance/github/experiments-site/src/components/containers/UpOnlyWBTC.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport ExperimentDetail from \"../ExperimentDetail\";\nimport stakedPut from \"../../contracts/stakedPut\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst UpOnlyWBTC = () => {\n  _s();\n\n  const [purchaseAmount, setPurchaseAmount] = useState(0);\n\n  const updatePurchaseAmount = ({\n    target: {\n      value\n    }\n  }) => {\n    setPurchaseAmount(value);\n  };\n\n  const purchase = async () => {\n    try {\n      const {\n        wbtcSize,\n        expDigg,\n        tradeAmt,\n        premium,\n        totalCost,\n        currentPrice,\n        expiry\n      } = await stakedPut.methods.getInputs(purchaseAmount).call(); // TODO: Call buyInstrument with inputs\n\n      const arr = [currentPrice, wbtcSize, premium, expiry, purchaseAmount, tradeAmt, wbtcSize, expDigg];\n      const response = await stakedPut.methods;\n      console.log(response);\n      console.log(`wbtcSize: ${wbtcSize}`, `expDigg: ${expDigg}`, `tradeAmt: ${tradeAmt}`, `premium: ${premium}`, `totalCost: ${totalCost}`, `currentPrice: ${currentPrice}`, `expiry: ${expiry}`);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(ExperimentDetail, {\n    purchaseAmount: purchaseAmount,\n    updatePurchaseAmount: updatePurchaseAmount,\n    purchase: purchase\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n\n_s(UpOnlyWBTC, \"tjRzb4ZXJkhXIJS4R4Gyp4G6pPg=\");\n\n_c = UpOnlyWBTC;\nexport default UpOnlyWBTC;\n\nvar _c;\n\n$RefreshReg$(_c, \"UpOnlyWBTC\");","map":{"version":3,"sources":["/Users/gmdscpr/Documents/Projectos/Crypto & Blockchain/DeFi Projects/ribbon finance/github/experiments-site/src/components/containers/UpOnlyWBTC.tsx"],"names":["React","useState","ExperimentDetail","stakedPut","UpOnlyWBTC","purchaseAmount","setPurchaseAmount","updatePurchaseAmount","target","value","purchase","wbtcSize","expDigg","tradeAmt","premium","totalCost","currentPrice","expiry","methods","getInputs","call","arr","response","console","log","err","error"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,gBAAP,MAA6B,qBAA7B;AACA,OAAOC,SAAP,MAAsB,2BAAtB;;;AAEA,MAAMC,UAAU,GAAG,MAAM;AAAA;;AACvB,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCL,QAAQ,CAAC,CAAD,CAApD;;AAEA,QAAMM,oBAAoB,GAAG,CAAC;AAAEC,IAAAA,MAAM,EAAE;AAAEC,MAAAA;AAAF;AAAV,GAAD,KAA4C;AACvEH,IAAAA,iBAAiB,CAACG,KAAD,CAAjB;AACD,GAFD;;AAIA,QAAMC,QAAQ,GAAG,YAAY;AAC3B,QAAI;AACF,YAAM;AACJC,QAAAA,QADI;AAEJC,QAAAA,OAFI;AAGJC,QAAAA,QAHI;AAIJC,QAAAA,OAJI;AAKJC,QAAAA,SALI;AAMJC,QAAAA,YANI;AAOJC,QAAAA;AAPI,UAQF,MAAMd,SAAS,CAACe,OAAV,CAAkBC,SAAlB,CAA4Bd,cAA5B,EAA4Ce,IAA5C,EARV,CADE,CAWF;;AACA,YAAMC,GAAG,GAAG,CAACL,YAAD,EAAeL,QAAf,EAAyBG,OAAzB,EAAkCG,MAAlC,EAA0CZ,cAA1C,EAA0DQ,QAA1D,EAAoEF,QAApE,EAA8EC,OAA9E,CAAZ;AACA,YAAMU,QAAQ,GAAG,MAAMnB,SAAS,CAACe,OAAjC;AACAK,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AAEAC,MAAAA,OAAO,CAACC,GAAR,CACG,aAAYb,QAAS,EADxB,EAEG,YAAWC,OAAQ,EAFtB,EAGG,aAAYC,QAAS,EAHxB,EAIG,YAAWC,OAAQ,EAJtB,EAKG,cAAaC,SAAU,EAL1B,EAMG,iBAAgBC,YAAa,EANhC,EAOG,WAAUC,MAAO,EAPpB;AASD,KAzBD,CAyBE,OAAOQ,GAAP,EAAY;AACZF,MAAAA,OAAO,CAACG,KAAR,CAAcD,GAAd;AACD;AACF,GA7BD;;AA+BA,sBACE,QAAC,gBAAD;AACE,IAAA,cAAc,EAAEpB,cADlB;AAEE,IAAA,oBAAoB,EAAEE,oBAFxB;AAGE,IAAA,QAAQ,EAAEG;AAHZ;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CA7CD;;GAAMN,U;;KAAAA,U;AA+CN,eAAeA,UAAf","sourcesContent":["import React, { useState } from \"react\";\nimport ExperimentDetail from \"../ExperimentDetail\";\nimport stakedPut from \"../../contracts/stakedPut\";\n\nconst UpOnlyWBTC = () => {\n  const [purchaseAmount, setPurchaseAmount] = useState(0);\n\n  const updatePurchaseAmount = ({ target: { value } }: { target: any }) => {\n    setPurchaseAmount(value);\n  };\n\n  const purchase = async () => {\n    try {\n      const {\n        wbtcSize,\n        expDigg,\n        tradeAmt,\n        premium,\n        totalCost,\n        currentPrice,\n        expiry,\n      } = await stakedPut.methods.getInputs(purchaseAmount).call();\n      \n      // TODO: Call buyInstrument with inputs\n      const arr = [currentPrice, wbtcSize, premium, expiry, purchaseAmount, tradeAmt, wbtcSize, expDigg]\n      const response = await stakedPut.methods;\n      console.log(response);\n\n      console.log(\n        `wbtcSize: ${wbtcSize}`,\n        `expDigg: ${expDigg}`,\n        `tradeAmt: ${tradeAmt}`,\n        `premium: ${premium}`,\n        `totalCost: ${totalCost}`,\n        `currentPrice: ${currentPrice}`,\n        `expiry: ${expiry}`\n      );\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <ExperimentDetail\n      purchaseAmount={purchaseAmount}\n      updatePurchaseAmount={updatePurchaseAmount}\n      purchase={purchase}\n    />\n  );\n};\n\nexport default UpOnlyWBTC;\n"]},"metadata":{},"sourceType":"module"}